#!/bin/bash
# begin_generated_IBM_copyright_prolog                             
#                                                                  
# This is an automatically generated copyright prolog.             
# After initializing,  DO NOT MODIFY OR MOVE                       
# **************************************************************** 
# Licensed Materials - Property of IBM                             
# 5724-Y95                                                         
# (C) Copyright IBM Corp.  2014, 2014    All Rights Reserved.      
# US Government Users Restricted Rights - Use, duplication or      
# disclosure restricted by GSA ADP Schedule Contract with          
# IBM Corp.                                                        
#                                                                  
# end_generated_IBM_copyright_prolog                               
#
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2011
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with
# IBM Corp.
#

# This script generates one output graph per host, plotting
# average CPU utilization against no. of sources for all the tests.
#
# There are multiple line plots in the output graphs, where
# each line plot corresponds to the plot for one test.
# 

function usage
{
    name=$(basename $0)
    echo "usage: $name <test-name> <num-nodes> <num-cpus> <data-dir>"
    echo ""
    echo "  - <test-name> : Name of the test for which graphs are to be generated."
    echo "    'ALL' for all the tests. Specific names eg P_BAS_1 for a specific test "
    echo "  - <num-nodes> : Number of nodes to use."
    echo "  - <num-cpus> : No. of CPUs to use on each node."
    echo "      Value '-1' implies all cores will be used"
    echo "  - <data-dir> : Root directory under which raw data of all tests is stored"
    echo "     e.g <current_dir>/../../Results/Perf is a default location"
    echo "     Graphs will be generated under the same root directory"
    echo "     By default, the graphs will be generated in"
    echo "     <current_dir>/../../Results/Perf/Graphs"
    echo ""
    echo "Generate one graph plotting the cpu utilization versus no. of sources"
    echo "of all or single test(s). Sample usage:"
    echo "    $name ALL 1 -1"
}

if [[ $# -ne 4 ]]; then
    usage;
    exit 1;
fi

DIR=$(dirname $0)

# It is either an array of all tests or a single test
TESTS=$1
if [[ "x$TESTS" == "xALL" ]]; then
    TESTS=('P_BAS_1' 'P_FLT_1' 'P_FLT_2' 'P_ENR_1' 'P_ENR_2' 'P_PRJ_1' 'P_AGG_1' 'P_AGG_2' 'P_AGG_3' 'P_AGG_4' 'P_STM_1' 'P_STM_2' 'P_SPT_1' 'P_COR_1' 'P_COR_2' 'P_COR_3' 'P_PTD_1' 'P_PTD_2' 'P_PTD_3' 'P_PTD_4')
fi

# no. of nodes
NUM_NODES=$2

# no. of CPUs. Value '-1' implies all the available cores of all nodes will be used
NUM_CPUS=$3

# Common root directory for the subdirectories where raw data from corr. tests are stored
DATA_DIR=$(readlink -f $4)

# The directory location of the graphs to be generated. Create one if not already exists
GRAPH_DIR="$DATA_DIR/Graphs/cpu_vs_src"
mkdir -p $GRAPH_DIR

# Delete old data from the GRAPH_DIR
rm -rf $GRAPH_DIR/*

# maintain max. CPU utilization obtained across all the tests
# Used to set the upper limit of Y-axis in the graph
maxCPU=0

# min number of data sources for which any test was run
# Used to set the lower limit of X-axis
minSources=0

# max number of data sources for which any test was run
# Used to set the upper limit of X-axis
maxSources=0

# used to initialize the value of minSources 
#to the first value of "sources" encountered below
first=1

for test in "${TESTS[@]}"
do
    ls -d $DATA_DIR/$test >/dev/null 2>&1
    if [ $? -ne 0 ]; then
	echo "Cannot find $DATA_DIR/$test directory">/dev/stderr
	continue
    fi

    flag=0

    # Array of data sources for which the test was run
    ls -d $DATA_DIR/$test/perf.* >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "Cannot find perf data for '$test'">/dev/stderr
        continue
    fi
    sourceArr=(`ls -ld $DATA_DIR/$test/perf.* | gawk -F/ '{print $NF}' | gawk -F. '{print $2}' | sort -n`)
    for sources in "${sourceArr[@]}"
    do
	perfDir=$DATA_DIR/$test/perf.$sources
	if  [[ ! -d $perfDir ]]; then
	    echo "Error! $perfDir does not exist. Exiting.. "
	    exit 1
	fi

	if [[ x$first == x1 ]]; then
	    minSources=$sources
	    first=0
	fi

	if [[ $maxSources -lt $sources ]]; then
	    maxSources=$sources
	fi
	if [[ $minSources -gt $sources ]]; then
	    minSources=$sources
	fi
	    
	file="$perfDir/cpu-mem.$NUM_NODES.$NUM_CPUS"
	if [[ ! -e $file ]]; then
	    echo "Warning ! file $file does not exist" 
	    continue
	fi

	# output data file to be used for graph generation	
	outfile=$GRAPH_DIR/${test}_cpu.$NUM_NODES.$NUM_CPUS.dat

	count=0
	cpuTotal=0
	while read x; do
	    cpuTotal=$((cpuTotal+x))
	    count=$((count+1))
	done < <(cat $file | cut -d " " -f 3) 

	if [[ $count -gt 0 ]]; then 
	    cpuAvg=$((cpuTotal/count))
	
	    if [[ $maxCPU -lt $cpuAvg ]]; then
		maxCPU=$cpuAvg
	    fi

	    if [[ "x$flag" == "x0" ]]; then
		echo "$sources  $cpuAvg" > $outfile
		flag=1
	    else
		echo "$sources  $cpuAvg" >> $outfile
	    fi
	fi
    done
done

graphfile=$GRAPH_DIR/cpu.$NUM_NODES.$NUM_CPUS

/usr/bin/gnuplot <<EOF
reset
set nolog y
set terminal postscript eps noenhanced color font "helvetica,15"
set output "`echo $graphfile`.eps"
set xlabel "Total no. of sources" font "Times-Roman,20"
xl=$minSources
xu=$maxSources
set xrange [xl:xu]
set xtics font "Times-Roman, 20"
set ylabel "Average CPU utilization (%)" font "Times-Roman,20"
yu=$maxCPU+(0.1*$maxCPU)
set yrange [0:yu]
set ytics font "Times-Roman, 20"
#rgb(r,g,b) = 65536*int(r) + 256*int(g) + int(b)
values="${TESTS[*]}"
file(n)=sprintf("$GRAPH_DIR/%s_cpu.$NUM_NODES.$NUM_CPUS.dat",word(values,n))
tit(n)=sprintf("%s Sources",word(values,n))
num=${#TESTS[@]}
plot for [i=1:num] file(i) using 1:2 title tit(i) with lp lw 4
#rgb (rgb(int(255*(rand(0))),int(255*(rand(0))),int(255*(rand(0)))))
EOF

if [[ -e $graphfile.eps ]]; then
    ps2pdfwr $graphfile.eps $graphfile.pdf
fi
