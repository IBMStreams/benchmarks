// begin_generated_IBM_copyright_prolog                             
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// Licensed Materials - Property of IBM                             
// 5724-Y95                                                         
// (C) Copyright IBM Corp.  2014, 2014    All Rights Reserved.      
// US Government Users Restricted Rights - Use, duplication or      
// disclosure restricted by GSA ADP Schedule Contract with          
// IBM Corp.                                                        
//                                                                  
// end_generated_IBM_copyright_prolog                               
/*                                                                  */
/* Licensed Materials - Property of IBM                             */
/* Copyright IBM Corp. 2011                                         */
/* US Government Users Restricted Rights - Use, duplication or      */
/* disclosure restricted by GSA ADP Schedule Contract with          */
/* IBM Corp.                                                        */
/*                                                                  */

namespace lmon.test;
use lmon.benchmark::*;

composite OneChain
{
    param
        expression<int32> $nCPUs;
        expression<Event.Source> $sourceKind;
        expression<uint32> $sourceIndex;
    graph
        stream<rstring event> Beat = FileSource() {
            param
                file : getSubmissionTimeValue("dataDir", "../../../../Data") + "/DataFiles/" +
                       (rstring) $sourceKind + (rstring) $sourceIndex + "/input-data";
                format : line;
                parsing : fast;            
        }

        stream<Event.Log> Parsed = EventParser(Beat) {
            param
                cpu :  getCPU($nCPUs, $sourceIndex, $sourceKind); 
        }

        stream<uint32 rMax> Aggregated = Custom(Parsed) {
            logic
                state : 
                    mutable tuple<uint32 rMax> res = { rMax = 0u };
                onTuple Parsed : {
                    if(eventKind==Event.Msg_Rcvd && randomId>res.rMax)
                        res.rMax = randomId; 
                }       
                onPunct Parsed : {
                    if(currentPunct()==Sys.FinalMarker)
                        submit(res, Aggregated);
                }
        }

        () as Sink = FileSink(Aggregated) {
            param
                file : (rstring) $sourceKind + (rstring) $sourceIndex + ".summary";
                format : txt;
        }
}

composite Main 
{
  graph
      () as Sink = CommonMain() { 
          param nCPUs : (int32) getSubmissionTimeValue("nCPUs", "-1");
                core : lmon.test::OneChain; 
      }
  config
      hostPool : WorkloadPool = createPool({tags=["workload"], size=4}, Sys.Shared),
                 MainPool = createPool({tags=["analytic"], size=(int32)getCompileTimeValue("nNodes")}, Sys.Shared); 
}

