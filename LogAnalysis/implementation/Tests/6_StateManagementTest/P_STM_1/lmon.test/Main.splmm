// begin_generated_IBM_copyright_prolog                             
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// Licensed Materials - Property of IBM                             
// 5724-Y95                                                         
// (C) Copyright IBM Corp.  2014, 2014    All Rights Reserved.      
// US Government Users Restricted Rights - Use, duplication or      
// disclosure restricted by GSA ADP Schedule Contract with          
// IBM Corp.                                                        
//                                                                  
// end_generated_IBM_copyright_prolog                               
/*                                                                  */
/* Licensed Materials - Property of IBM                             */
/* Copyright IBM Corp. 2011                                         */
/* US Government Users Restricted Rights - Use, duplication or      */
/* disclosure restricted by GSA ADP Schedule Contract with          */
/* IBM Corp.                                                        */
/*                                                                  */

namespace lmon.test;
use lmon.benchmark::*;

<%
my $testDir = $ARGV[0];
my $outDir = $ARGV[1];
%>

composite OneChain(output stream<uint64 count, uint32 index> Out)
{
    param
        expression<int32> $nCPUs;
        expression<Event.Source> $sourceKind;
        expression<uint32> $sourceIndex;
    graph

        stream<rstring event> Sourced = TCPSource() {
            param
                role : server;
                name : "workload."+(rstring)$sourceIndex+(rstring)$sourceKind;
                format : line;        
        }        
/*
        stream<rstring event> Sourced = FileSource() {
            param
                file : "/home/socc01/Data.200/" +
                       (rstring) $sourceKind + (rstring) $sourceIndex + "/input-data";
                format : line;
                parsing : fast;

        }
*/

        stream<Event.TimestampedLog> Parsed = EventParserPerf(Sourced) {
            param
                cpu :  getCPU($nCPUs, $sourceIndex, $sourceKind); 
               // cpu :  -1; 
        }

        stream<Event.TimestampedLog> Counted1 = EventCounterPerf(Parsed) {
            param
                nCPUs : $nCPUs;
                file : (rstring) $sourceKind + (rstring) $sourceIndex + ".source-stats";
                period : 30u;
        }

        // Counts for each source
        stream<uint64 count, uint32 index> Out = RunningEventCounter(Counted1) {
            param
               sourceIndex :  $sourceIndex;
               period :  1000ul; // every thousand tuples
        }    
}

composite OnePool(input stream<uint64 count, uint32 index> In)
{
    param
        expression<int32> $nCPUs;
        expression<uint32> $poolIndex;    
        expression<Event.Source> $sourceKind;
        expression<uint32> $sourceIndexStart;    
        expression<uint32> $sourceIndexEnd;    
    graph
        // Merges the counts for the pools
        stream<uint64 count> Merged = RunningEventCountMerger(In) {
            param
                continuous: true;
        }        

        stream<rstring time, uint64 count> Periodic = TimedSampler(Merged) {
            param 
                period : 30.0;
        }

        () as Sink = FileSink(Periodic) {
            param
                file : "<%=$outDir%>/" + "P" + (rstring)$poolIndex + ".summary";
                format : txt;
                flush : 1u;
        }  
}

composite Main 
{
  graph
      () as Sink1 = CommonMainWithPools() { 
          param nCPUs : (int32) getSubmissionTimeValue("nCPUs", "-1");
                chainCore : lmon.test::OneChain; 
                poolACore : lmon.test::OnePool;
                poolBCore : lmon.test::OnePool;
                chainOutputType: tuple<uint64 count, uint32 index>;
                workload : lmon.benchmark::CommonWorkload;
      }
  config
      hostPool : WorkloadPool = createPool({tags=["workload"], size=4}, Sys.Shared),
                 MainPool = createPool({tags=["analytic"], size=(int32)getCompileTimeValue("nNodes")}, Sys.Shared);
}

