// begin_generated_IBM_copyright_prolog                             
//                                                                  
// This is an automatically generated copyright prolog.             
// After initializing,  DO NOT MODIFY OR MOVE                       
// **************************************************************** 
// Licensed Materials - Property of IBM                             
// 5724-Y95                                                         
// (C) Copyright IBM Corp.  2014, 2014    All Rights Reserved.      
// US Government Users Restricted Rights - Use, duplication or      
// disclosure restricted by GSA ADP Schedule Contract with          
// IBM Corp.                                                        
//                                                                  
// end_generated_IBM_copyright_prolog                               
/*                                                                  */
/* Licensed Materials - Property of IBM                             */
/* Copyright IBM Corp. 2011                                         */
/* US Government Users Restricted Rights - Use, duplication or      */
/* disclosure restricted by GSA ADP Schedule Contract with          */
/* IBM Corp.                                                        */
/*                                                                  */

namespace lmon.test;
use lmon.benchmark::*;

composite OneChain
{
    param
        expression<int32> $nCPUs;
        expression<Event.Source> $sourceKind;
        expression<uint32> $sourceIndex;

    type
        static SplitOne = tuple<uint64 timeMillis, // posix time in millisecs
                                Event.Kind eventKind, // Msg_Sent, Msg_Rcvd, Filler
                                uint32 deviceId, // rotates (different rules for A, B)
                                uint64 messageId, // increments for each message
                                int64 timeStamp>;
        static SplitTwo = tuple<uint64 timeMillis, // posix time in millisecs
                                Event.Kind eventKind, // Msg_Sent, Msg_Rcvd, Filler
                                uint32 randomId, // 8 digit random id
                                int64 timeStamp>;

    graph

        stream<rstring event> Sourced = TCPSource() {
            param
                role : server;
                name : "workload."+(rstring)$sourceIndex+(rstring)$sourceKind;
                format : line;        
        }        
/*
        stream<rstring event> Sourced = FileSource() {
            param
                file : "/home/socc01/Data.200/" +
                       (rstring) $sourceKind + (rstring) $sourceIndex + "/input-data";
                format : line;
                parsing : fast;

        }
*/
        stream<Event.TimestampedLog> Parsed = EventParserPerf(Sourced) {
            param
                cpu :  getCPU($nCPUs, $sourceIndex, $sourceKind); 
                // cpu :  -1; 
        }

        stream<Event.TimestampedLog> Counted1 = EventCounterPerf(Parsed) {
            param
                nCPUs : $nCPUs;
                file : (rstring) $sourceKind + (rstring) $sourceIndex + ".source-stats";
                period : 30u;
        }

        (stream<SplitOne> SplitStreamOne;
         stream<SplitTwo> SplitStreamTwo) = Functor(Counted1) {}

        stream<SplitOne> CountedSinkOne
          = EventCounterPerf(SplitStreamOne) {
            param
                nCPUs : $nCPUs;
                file: (rstring) $sourceKind + (rstring) $sourceIndex + ".sink-stats-one";
                period: 30u;
                forward: false;
        }

        stream<SplitTwo> CountedSinkTwo
          = EventCounterPerf(SplitStreamTwo) {
            param
                nCPUs : $nCPUs;
                file: (rstring) $sourceKind + (rstring) $sourceIndex + ".sink-stats-two";
                period: 30u;
                forward: false;
        }
}

composite Main 
{
  graph
      () as Sink = CommonMain() { 
          param nCPUs : (int32) getSubmissionTimeValue("nCPUs", "-1");
                core : lmon.test::OneChain; 
                workload : lmon.benchmark::CommonWorkload;
      }
  config
      hostPool : WorkloadPool = createPool({tags=["workload"], size=4}, Sys.Shared),
                 MainPool = createPool({tags=["analytic"], size=(int32)getCompileTimeValue("nNodes")}, Sys.Shared);
}

